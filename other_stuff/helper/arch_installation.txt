loadkeys de

mit gdisk/fdisk/cfdisk geeignet partitionieren

z.B. mit gdisk
gdisk /dev/x | x ist Festplatte
n -> enter -> enter -> +476G -> enter # linux partition
n -> enter -> enter -> ef02 -> enter # grub partition
p -> w      # check and write
mkfs.fat -F 32 -n EFIBOOT /dev/nvme0n1p2
mkfs.ext4 -L p_arch /dev/nvme0n1p1

mount -L p_arch /mnt         # root
mkdir -p /mnt/boot
mount -L EFIBOOT /mnt/boot   # EFI

Standard Arch Anleitung befolgen

Internet herstellen:
wifi-menu -> testen mit ping -c3 www.archlinux.de
pacstrap /mnt base base-devel intel-ucode wpa_supplicant dialog		# Basissystem

genfstab -Lp /mnt > /mnt/etc/fstab				# fstab erzeugen
nano /mnt/etc/fstab -> ändern zu rw,defaults,noatime,discard	# fstab an SSD anpassen
arch-chroot /mnt/						# Installationsmedium verlassen

echo myhost > /etc/hostname
nano /etc/locale.gen und die 3 de auswählen
locale-gen
echo KEYMAP=de-latin1 > /etc/vconsole.conf
echo FONT=lat9w-16 >> /etc/vconsole.conf
ln -sf /usr/share/zoneinfo/Europe/Berlin /etc/localtime
pacman -Sy
mkinitcpio -p linux
passwd 
pacman -S efibootmgr dosfstools gptfdisk
pacman -S grub
grub-install --target=x86_64-efi --efi-directory=/boot --bootloader-id=arch_grub --recheck --debug
grub-mkconfig -o /boot/grub/grub.cfg

exit   # auslogen von arch-chroot 
umount -R /mnt
reboot


wifi-menu
useradd -m -g users -s /bin/bash kili
passwd kili
pacman -S sudo
EDITOR=nano visudo -> %wheel ALL=(ALL) ALL # und Leerzeichen entfernen
gpasswd -a duda wheel und zu video/audio/power/games
pacman -S acpid dbus avahi cups cronie
systemctl enable acpid
systemctl enable avahi-daemon
systemctl enable org.cups.cupsd.service
systemctl enable cronie
systemctl enable --now systemd-timesyncd.service -> check mit date
hwclock -w

pacman -S (alle relevanten Programme)

reboot

#anschließend konfigurieren
